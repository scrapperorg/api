input {
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/postgresql-${JDBC_VERSION}.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://${MIKRO_ORM_HOST}:5432/${MIKRO_ORM_DB_NAME}"
    jdbc_user => "${MIKRO_ORM_USER}"
    jdbc_password => "${MIKRO_ORM_PASSWORD}"
    schedule => "* * * * *"
    statement => "SELECT document_id as id, identifier, title, source, status, assigned_user_id, project_id, publication_date, post_ocr_content, is_rules_breaker, processing_status FROM document"
    type => 'document'
  }
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/postgresql-${JDBC_VERSION}.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://${MIKRO_ORM_HOST}:5432/${MIKRO_ORM_DB_NAME}"
    jdbc_user => "${MIKRO_ORM_USER}"
    jdbc_password => "${MIKRO_ORM_PASSWORD}"
    schedule => "* * * * *"
    statement => "SELECT project_id as id, title, created_at, numar_inregistrare_senat, numar_inregistrare_guvern, presents_interest FROM project"
    type => 'project'
  }
}

filter {
  if [type] == "document" {
    mutate {
      rename => { "id" => "document_id" }
    }
  }
  else if [type] == "project" {
    mutate {
      rename => { "id" => "project_id" }
    }
  }
}

output {
  elasticsearch {
    hosts => ["http://${LOCAL_INTERNAL_HOST}:9200"]
    index => "document"
    document_id => "documents_%{document_id}"
    doc_as_upsert => true
    user => "elastic"
    password => "${ELASTIC_PASSWORD}"
  }
  elasticsearch {
    hosts => ["http://${LOCAL_INTERNAL_HOST}:9200"]
    index => "project"
    document_id => "projects_%{project_id}"
    doc_as_upsert => true
    user => "elastic"
    password => "${ELASTIC_PASSWORD}"
  }
}